{
  "name": "sunny",
  "description": "Multi-cloud datastore client.",
  "version": "0.0.6",
  "author": {
    "name": "Ryan Roemer",
    "email": "ryan@loose-bits.com"
  },
  "url": "http://sunnyjs.org/",
  "main": "index",
  "engines": {
    "node": ">=0.4.5"
  },
  "dependencies": {
    "xml2js": "0.1.9"
  },
  "devDependencies": {
    "jake": "0.1.19",
    "findit": "0.1.1",
    "jslint": "0.1.0",
    "nodeunit": "0.7.4",
    "node-uuid": "1.2.0",
    "showdown": "0.0.1",
    "async": "0.1.22",
    "stylus": "0.15.1",
    "cakepop": "0.1.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ryan-roemer/node-sunny.git"
  },
  "keywords": [
    "sunny",
    "cloud",
    "amazon",
    "aws",
    "amazon web services",
    "s3",
    "simple storage service",
    "google storage for developers"
  ],
  "readme": "# Sunny.js\nSunny is a multi-cloud datastore client for [Node.js](http://nodejs.org).\nSunny aims for an efficient, event-based common interface to various cloud\nstores to enable cloud-agnostic programming that retains flexibility and\nspeed.\n\n* [Sunny.js Documentation](http://sunnyjs.org): Guides and API documentation.\n* [Sunny.js GitHub Page](http://github.com/ryan-roemer/node-sunny): Source\n  repository and issue tracker.\n\n## Features\n* Abstracts cloud provider differences. Focus on writing your application,\n  not juggling \"x-amz-\" vs. \"x-goog-\" headers.\n* Fully configurable headers, cloud headers, cloud metadata.\n* Sensible and cloud-agnostic error handling.\n* \"One-shot\" requests whenever possible.\n* SSL support.\n* Blob GET/PUT operations implement Node [Readable][ReadStream] and\n  [Writable][WriteStream] Stream interfaces.\n\n[ReadStream]: http://nodejs.org/docs/v0.4.9/api/streams.html#readable_Stream\n[WriteStream]: http://nodejs.org/docs/v0.4.9/api/streams.html#writable_Stream\n\n## Cloud providers\nSunny has full blob support for:\n\n* [Amazon S3][S3]: Amazon Simple Storage Service.\n* [Google Storage][GSFD]: Google Storage for Developers.\n\n[S3]: http://aws.amazon.com/s3/\n[GSFD]: http://code.google.com/apis/storage/\n\nFuture support is planned for:\n\n* [Rackspace Cloud Files][CF]: Rackspace Cloud Files\n* [OpenStack Storage][OS]: OpenStack Storage\n* (Maybe) local file system as a dummy cloud provider.\n\n[CF]: http://www.rackspacecloud.com/cloud_hosting_products/files/\n[OS]: http://openstack.org/projects/storage/\n\n## Installation / Getting Started\nInstall Sunny directly from [npm][NPM]:\n\n    $ npm install sunny\n\nor the [GitHub][SGH] repository:\n\n    $ git clone git@github.com:ryan-roemer/node-sunny.git\n    $ npm install ./node-sunny\n\n[NPM]: http://npmjs.org/\n[SGH]: https://github.com/ryan-roemer/node-sunny\n\nPlease read the docs (in source at \"docs/\") and review the \"live\" tests\n(in source at \"test/live\") that perform the entire range of Sunny operations\nagainst real cloud datastores.\n\n## Project Goals\n### A common cloud interface.\nThe cloud providers that Sunny supports (or will support) provide similar, but\nnot quite equivalent interfaces. Amazon S3 and Google Storage share a nearly\nidentical interface, as well as Rackspace Cloud Files and OpenStack Storage.\nHowever, there are some subtle differences, particularly with naming, errors,\nstatus codes, etc.\n\n### Extensible and accessible.\nNotwithstanding the goal for a common API, Sunny aims to provide access to\nas much of the internals of a given cloud datastore as possible. In the current\ndevelopment phase, that means exposing as many of the query / header / metadata\nfeatures and functionality in the underlying store as won't make maintaining\na common interface unpalatable.\n\n### Strong bias for \"one-shot\" requests.\nMost cloud operations can be performed with a single HTTP request. However,\nmany cloud client libraries add in extra HTTP calls along the way for say\na blob file GET request (perhaps first requesting an authorization URL,\nchecking the container path for existence, etc.).\n\nSunny aims to perform the minimum amount of calls possible by default. That\nsaid, sometimes it is good to have a few sanity check intermediate operations,\nso Sunny can make calls with validation (e.g., checking a bucket exists first).\n\n## Cloud Operations\n### Supported\nSunny currently supports the following cloud operations:\n\n* List containers:\n  ``connection.getContainers()``\n* PUT / DELETE container:\n  ``container.put()``,\n  ``container.del()``\n* List blobs in a container:\n  ``container.getBlobs()``\n* PUT / HEAD / GET / DELETE blob:\n  ``blob.put()``,\n  ``blob.putFromFile()``,\n  ``blob.head()``,\n  ``blob.get()``,\n  ``blob.getToFile()``,\n  ``blob.del()``\n\n### Future\nSunny is under rapid development. Some areas for enhancements:\n\n* Copy blob.\n* Update blob metadata without PUT.\n* Set blob / container ACL, policies, etc.",
  "readmeFilename": "README.md",
  "_id": "sunny@0.0.6",
  "dist": {
    "shasum": "6d0270ea92e64fdd3e51c56380d71d37ebaea0a2"
  },
  "_from": "sunny@0.0.6"
}
